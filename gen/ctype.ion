
const data_table: uint16 const[] = {
    0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x20c, 0x208, 0x208, 0x208, 0x208, 0x008, 0x008, 
    0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 0x008, 
    0x284, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 
    0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x8b1, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 
    0x1a0, 0xca3, 0xca3, 0xca3, 0xca3, 0xca3, 0xca3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 
    0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x4a3, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 
    0x1a0, 0x8e3, 0x8e3, 0x8e3, 0x8e3, 0x8e3, 0x8e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 
    0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x0e3, 0x1a0, 0x1a0, 0x1a0, 0x1a0, 0x008, 
};

enum Flags{
    ALNUM,
    ALPHA,
    BLANK,
    CNTRL,
    DIGIT,
    GRAPH,
    LOWER,
    PRINT,
    PUNCT,
    SPACE,
    UPPER,
    XDIGIT,
}

@inline
func isascii(c: char): bool {
    return (c & 0x80) ? false : true;
}

@inline
func _is(c: char, f: Flags): bool {
    return isascii(c) && (data_table[c] & f) ? true : false;
}

func isalnum(c: char): bool {
    return _is(c, ALNUM);
}
func isalpha(c: char): bool {
    return _is(c, ALPHA);
}
func isblank(c: char): bool {
    return _is(c, BLANK);
}
func iscntrl(c: char): bool {
    return _is(c, CNTRL);
}
func isdigit(c: char): bool {
    return _is(c, DIGIT);
}
func isgraph(c: char): bool {
    return _is(c, GRAPH);
}
func islower(c: char): bool {
    return _is(c, LOWER);
}
func isprint(c: char): bool {
    return _is(c, PRINT);
}
func ispunct(c: char): bool {
    return _is(c, PUNCT);
}
func isspace(c: char): bool {
    return _is(c, SPACE);
}
func isupper(c: char): bool {
    return _is(c, UPPER);
}
func isxdigit(c: char): bool {
    return _is(c, XDIGIT);
}
