
var data_table: uint16 const[0x100] = {
    0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x083, 0x082, 0x082, 0x082, 0x082, 0x002, 0x002, 
    0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 0x002, 
    0x0a1, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 
    0x124, 0x124, 0x124, 0x124, 0x124, 0x124, 0x124, 0x124, 0x124, 0x124, 0x060, 0x060, 0x060, 0x060, 0x060, 0x060, 
    0x060, 0x128, 0x128, 0x128, 0x128, 0x128, 0x128, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 
    0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x028, 0x060, 0x060, 0x060, 0x060, 0x060, 
    0x060, 0x130, 0x130, 0x130, 0x130, 0x130, 0x130, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 
    0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x030, 0x060, 0x060, 0x060, 0x060, 0x002, 
    // [0x80 to 0xff] are zeros
};

enum Flags {
    BLANK = 1 << 0,
    CNTRL = 1 << 1,
    DIGIT = 1 << 2,
    UPPER = 1 << 3,
    LOWER = 1 << 4,
    PRINT = 1 << 5,
    PUNCT = 1 << 6,
    SPACE = 1 << 7,
    XDIGIT = 1 << 8,
    ALPHA = UPPER | LOWER,
    ALNUM = ALPHA | DIGIT,
    GRAPH = PUNCT | ALNUM,
    ASCII = CNTRL | PRINT,
}

@inline
func isclass(c: int, f: Flags): bool {
    return data_table[uint8(c)] & f != 0;
}

@inline
func isblank(c: char): bool {
    return isclass(c, BLANK);
}
@inline
func iscntrl(c: char): bool {
    return isclass(c, CNTRL);
}
@inline
func isdigit(c: char): bool {
    return isclass(c, DIGIT);
}
@inline
func isupper(c: char): bool {
    return isclass(c, UPPER);
}
@inline
func islower(c: char): bool {
    return isclass(c, LOWER);
}
@inline
func isprint(c: char): bool {
    return isclass(c, PRINT);
}
@inline
func ispunct(c: char): bool {
    return isclass(c, PUNCT);
}
@inline
func isspace(c: char): bool {
    return isclass(c, SPACE);
}
@inline
func isxdigit(c: char): bool {
    return isclass(c, XDIGIT);
}
@inline
func isalpha(c: char): bool {
    return isclass(c, UPPER | LOWER);
}
@inline
func isalnum(c: char): bool {
    return isclass(c, ALPHA | DIGIT);
}
@inline
func isgraph(c: char): bool {
    return isclass(c, PUNCT | ALNUM);
}
@inline
func isascii(c: char): bool {
    return isclass(c, CNTRL | PRINT);
}

@inline
func toupper(c: char): char {
    return islower(c) ? c ^ 0b100000 : c;
}
@inline
func tolower(c: char): char {
    return isupper(c) ? c ^ 0b100000 : c;
}
